{"version":3,"sources":["components/Header.js","actions.js","components/GameBoard.js","components/App.js","serviceWorker.js","reducer.js","store.js","index.js"],"names":["connect","state","player1","player2","winner","dispatch","saveName","name","type","payload","restartGame","props","useState","setName","className","value","onChange","e","target","placeholder","onClick","submitPlayerName","field","makeMove","rowIndex","cellIndex","map","row","cell","style","color","App","Boolean","window","location","hostname","match","initialState","currentPlayer","checkWin","fieldToCheck","player","i","every","reducer","action","updatedField","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f4b5dc5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport { saveName } from \"../actions\";\nimport { restartGame } from \"../actions\";\n\nfunction Header(props) {\n\n    const [name, setName] = useState('');\n\n    const submitPlayerName = (name) => {\n        props.saveName(name)\n        setName('');\n    }\n\n    return (\n        <div className=\"header\">\n            <h2>Welcome to the coolest Tic-Tac-Toe ever.</h2>\n            {\n                props.player1 !== '' && props.player2 !== ''\n                    ? props.winner === null && <h3>{props.player1} and {props.player2} enjoy the game!</h3>\n                    : <div>\n                        <h3>Please enter name of the {props.player1 === '' ? 'first' : 'second'} player {props.player1 && 'to get started'}</h3>\n                        <input type={\"text\"} value={name} onChange={e => setName(e.target.value)} placeholder={\"Player's name\"}/>\n                        <button onClick={() => submitPlayerName(name)}>submit</button>\n                    </div>\n            }\n            {\n                props.winner  &&\n                <div className={\"gameOver\"}>\n                    {\n                        props.winner === 'tie'\n                            ? <h1> It's a tie! </h1>\n                            : <h1>{props.winner} has won. Congratulations!</h1>\n                    }\n                    <button className={\"restart-btn\"} onClick={props.restartGame}>Restart Game</button>\n                </div>\n            }\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    player1: state.player1,\n    player2: state.player2,\n    winner: state.winner\n})\n\nconst mapDispatchToProps = dispatch => ({\n    saveName: (name) => dispatch(saveName(name)),\n    restartGame: () => dispatch(restartGame())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","export const makeMove = (rowIndex, cellIndex) => ({type: 'MOVE', payload: {rowIndex: rowIndex, cellIndex: cellIndex} });\n\nexport const saveName = (name) => ({type: 'SAVE_NAME', payload: name});\n\nexport const restartGame = () => ({type: 'RESTART_GAME'});\n","import React from 'react';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport { makeMove } from \"../actions\";\n\nfunction GameBoard(props) {\n\n    const makeMove = (rowIndex, cellIndex) => {\n        props.makeMove(rowIndex, cellIndex);\n    }\n\n    return (\n        <div className={\"gameContainer\"}>\n            <div className=\"gameBoard\">\n                {   props.player1 && props.player2 &&\n                    props.field.map((row, rowIndex) => (\n                        <div className={\"row\"}>\n                            {row.map((cell, cellIndex) => (\n                                <div className={\"cell\"} onClick={() => makeMove(rowIndex, cellIndex)} style={{color: cell === 'X' ? \"#31859c\" : \"#9bbb59\"}}>{cell}</div>\n                            ))\n                            }\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    player1: state.player1,\n    player2: state.player2,\n    field: state.field\n});\n\nconst mapDispatchToProps = dispatch => ({\n    makeMove: (rowIndex, cellIndex) => dispatch(makeMove(rowIndex, cellIndex))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameBoard);\n\n","import React from 'react';\nimport '../App.css';\nimport Header from \"./Header\";\nimport GameBoard from \"./GameBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className={\"app-container\"}>\n            <Header />\n            <GameBoard />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    player1: '',\n    player2: '',\n    field: [\n        [null, null, null],\n        [null, null, null],\n        [null, null, null]\n    ],\n    currentPlayer: 1,\n    winner: null\n}\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'MOVE':\n            const updatedField = [...state.field];\n            if (state.currentPlayer === 1) {\n                updatedField[action.payload.rowIndex][action.payload.cellIndex] = 'X';\n                return {\n                    ...state,\n                    field: [...updatedField],\n                    winner: checkWin(updatedField, 'X') === 'tie' ? 'tie' : checkWin(updatedField, 'X') ? state.player1 : null,\n                    currentPlayer: 2\n                    }\n            } else if (state.currentPlayer === 2) {\n                updatedField[action.payload.rowIndex][action.payload.cellIndex] = 'O';\n                return {\n                    ...state,\n                    field: [...updatedField],\n                    winner: checkWin(updatedField, 'O') === 'tie' ? 'tie' : checkWin(updatedField, 'O') ? state.player2 : null,\n                    currentPlayer: 1\n                };\n            }\n            break;\n        case 'SAVE_NAME':\n            if (!state.player1) {\n                return {\n                    ...state,\n                    player1: action.payload\n                }\n            } else if (!state.player2) {\n                return {\n                    ...state,\n                    player2: action.payload\n                }\n            }\n            break;\n        case 'RESTART_GAME':\n            return {\n                ...state,\n                field: [\n                    [null, null, null],\n                    [null, null, null],\n                    [null, null, null]\n                ],\n                currentPlayer: 1,\n                winner: null\n            }\n        default:\n            return state;\n    }\n}\n\nconst checkWin = (fieldToCheck, player) => {\n    if (fieldToCheck[1][1] === player) { //check diagonal\n        if (fieldToCheck[0][0] === player && fieldToCheck[2][2] === player) return true;\n        if (fieldToCheck[0][2] === player && fieldToCheck[2][0] === player) return true;\n    }\n    for (let i = 0; i < 3; i++) {\n        if (fieldToCheck[i].every(cell => cell === player)) return true; // check rows\n        if (fieldToCheck.every(row => row[i] === player)) return true; // check columns\n    }\n    if (fieldToCheck.every(row => row.every(cell => cell))) return 'tie';\n    return false;\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}