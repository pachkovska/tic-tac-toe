{"version":3,"sources":["components/Header.js","actions.js","components/GameBoard.js","components/App.js","serviceWorker.js","reducer.js","store.js","index.js"],"names":["connect","state","player1","player2","dispatch","saveName","name","type","payload","props","useState","setName","className","value","onChange","e","target","placeholder","onClick","submitPlayerName","field","currentPlayer","map","row","cell","App","Boolean","window","location","hostname","match","initialState","reducer","action","numberChange","console","log","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPA8BA,IASeA,eATS,SAAAC,GAAK,MAAK,CAC9BC,QAASD,EAAMC,QACfC,QAASF,EAAME,YAGQ,SAAAC,GAAQ,MAAK,CACpCC,SAAU,SAACC,GAAD,OAAUF,EClCA,SAACE,GAAD,MAAW,CAACC,KAAM,YAAaC,QAASF,GDkC/BD,CAASC,QAG3BN,EAlCf,SAAgBS,GAAQ,IAAD,EAEKC,mBAAS,IAFd,mBAEZJ,EAFY,KAENK,EAFM,KASnB,OACI,yBAAKC,UAAU,UACX,wEAEsB,KAAlBH,EAAMP,SAAoC,KAAlBO,EAAMN,QACxB,4BAAKM,EAAMP,QAAX,QAAyBO,EAAMN,QAA/B,oBACA,6BACE,wDAAgD,KAAlBM,EAAMP,QAAiB,QAAU,SAA/D,WAAiFO,EAAMP,SAAW,kBAClG,2BAAOK,KAAM,OAAQM,MAAOP,EAAMQ,SAAU,SAAAC,GAAC,OAAIJ,EAAQI,EAAEC,OAAOH,QAAQI,YAAa,kBACvF,4BAAQC,QAAS,kBAdZ,SAACZ,GACtBG,EAAMJ,SAASC,GACfK,EAAQ,IAY+BQ,CAAiBb,KAAxC,eEDxB,IAOeN,eAPS,SAAAC,GAAK,MAAK,CAC9BC,QAASD,EAAMC,QACfC,QAASF,EAAME,QACfiB,MAAOnB,EAAMmB,MACbC,cAAepB,EAAMoB,iBAGVrB,EAzBf,SAAmBS,GAEf,OACI,yBAAKG,UAAU,aAEPH,EAAMW,MAAME,KAAI,SAAAC,GAAG,OACf,yBAAKX,UAAW,OACXW,EAAID,KAAI,SAAAE,GAAI,OACT,yBAAKZ,UAAW,QAASY,EAAzB,kBCEbC,MATf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAgB,CAClB7B,QAAS,GACTC,QAAS,GACTiB,MAAO,CACH,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,OAEjBC,cAAe,GAqBJW,EAlBC,WAAmC,IAAlC/B,EAAiC,uDAAzB8B,EAAcE,EAAW,uCAE9C,OAAQA,EAAO1B,MACX,IAAK,OACD,GAA4B,IAAxBN,EAAMoB,cAAqB,OAAO,eAAIpB,EAAX,CAAkBiC,aAAcjC,EAAMiC,aAAe,IACxF,IAAK,YACD,IAAKjC,EAAMC,QAEP,OADAiC,QAAQC,IAAIH,EAAOzB,SACZ,eAAIP,EAAX,CAAkBC,QAAS+B,EAAOzB,UAC/B,IAAKP,EAAME,QAEd,OADAgC,QAAQC,IAAIH,EAAOzB,SACZ,eAAIP,EAAX,CAAkBE,QAAS8B,EAAOzB,UAE1C,QACI,OAAOP,ICpBJoC,EAFDC,YAAYN,EAASL,OAAOY,8BAAgCZ,OAAOY,gCCKjFC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QAGRM,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,a","file":"static/js/main.0657d034.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport { saveName } from \"../actions\";\n\nfunction Header(props) {\n\n    const [name, setName] = useState('');\n\n    const submitPlayerName = (name) => {\n        props.saveName(name)\n        setName('');\n    }\n\n    return (\n        <div className=\"header\">\n            <h2>Welcome to the coolest Tic-Tac-Toe ever.</h2>\n            {\n                props.player1 !== '' && props.player2 !== ''\n                    ? <h3>{props.player1} and {props.player2} enjoy the game!</h3>\n                    : <div>\n                        <h3>Please enter name of the {props.player1 === '' ? 'first' : 'second'} player {props.player1 && 'to get started'}</h3>\n                        <input type={\"text\"} value={name} onChange={e => setName(e.target.value)} placeholder={\"Player's name\"}/>\n                        <button onClick={() => submitPlayerName(name)}>submit</button>\n                    </div>\n            }\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    player1: state.player1,\n    player2: state.player2,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    saveName: (name) => dispatch(saveName(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","export const makeMove = () => ({type: 'MOVE'});\n\nexport const saveName = (name) => ({type: 'SAVE_NAME', payload: name});\n","import React, { useState } from 'react';\nimport '../App.css';\nimport { connect } from 'react-redux';\n\nfunction GameBoard(props) {\n\n    return (\n        <div className=\"gameBoard\">\n            {\n                props.field.map(row => (\n                    <div className={\"row\"}>\n                        {row.map(cell => (\n                            <div className={\"cell\"}>{cell} - </div>\n                        ))\n                        }\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    player1: state.player1,\n    player2: state.player2,\n    field: state.field,\n    currentPlayer: state.currentPlayer,\n})\n\nexport default connect(mapStateToProps)(GameBoard);\n\n","import React from 'react';\nimport '../App.css';\nimport Header from \"./Header\";\nimport GameBoard from \"./GameBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <GameBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState =  {\n    player1: '',\n    player2: '',\n    field: [\n        [null, null, null],\n        [null, null, null],\n        [null, null, null]\n    ],\n    currentPlayer: 1\n}\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'MOVE':\n            if (state.currentPlayer === 1) return {...state, numberChange: state.numberChange + 1};\n        case 'SAVE_NAME':\n            if (!state.player1) {\n                console.log(action.payload)\n                return {...state, player1: action.payload}\n            } else if (!state.player2) {\n                console.log(action.payload)\n                return {...state, player2: action.payload}\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}